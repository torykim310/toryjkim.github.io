{"componentChunkName":"component---src-templates-blog-post-js","path":"/algorithm/dynamic-programming/","result":{"data":{"site":{"siteMetadata":{"title":"Tory","author":"[Tory]","siteUrl":"https://gatsby-starter-bee.netlify.com","comment":{"disqusShortName":"","utterances":"JaeYeopHan/gatsby-starter-bee"},"sponsor":{"buyMeACoffeeId":"jbee"}}},"markdownRemark":{"id":"020b85fe-0e22-54c7-b653-6ed3c6bd8206","excerpt":"동적계획법이란 두 가지 조건을 포함해서 복잡한 문제를 보다 단순한 부분 문제로 나누어 해결하는 방법입니다. 부분문제들의 최적해가 전체의 최적해를 이룹니다. 동일한 부분문제들이 여러번 발생합니다. 조건이 충족되지 않으면 분할&정복 문제라고 합니다. 동적계획법의 핵심 중복되는 연산을 미리 캐싱해 두고, 중복 연산이 발생할 때 마다 참조하여 연산을 줄입니다. 즉, 공간과 시간복잡도를 trade한 대표적인 방법이라고 볼 수 있습니다.","html":"<h2 id=\"동적계획법이란\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81%EA%B3%84%ED%9A%8D%EB%B2%95%EC%9D%B4%EB%9E%80\" aria-label=\"동적계획법이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적계획법이란</h2>\n<p>두 가지 조건을 포함해서 복잡한 문제를 보다 단순한 부분 문제로 나누어 해결하는 방법입니다.</p>\n<ol>\n<li>부분문제들의 최적해가 전체의 최적해를 이룹니다.</li>\n<li>\n<p>동일한 부분문제들이 여러번 발생합니다.</p>\n<ul>\n<li>조건이 충족되지 않으면 분할&#x26;정복 문제라고 합니다.</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"동적계획법의-핵심\" style=\"position:relative;\"><a href=\"#%EB%8F%99%EC%A0%81%EA%B3%84%ED%9A%8D%EB%B2%95%EC%9D%98-%ED%95%B5%EC%8B%AC\" aria-label=\"동적계획법의 핵심 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>동적계획법의 핵심</h3>\n<p>중복되는 연산을 미리 캐싱해 두고, 중복 연산이 발생할 때 마다 참조하여 연산을 줄입니다. 즉, 공간과 시간복잡도를 trade한 대표적인 방법이라고 볼 수 있습니다.</p>","frontmatter":{"title":"Dynamic Programming","date":"April 07, 2021"}}},"pageContext":{"slug":"/algorithm/dynamic-programming/","previous":{"fields":{"slug":"/Problem Solving/burglary/"},"frontmatter":{"title":"burglary","category":"Problem Solving","draft":false}},"next":{"fields":{"slug":"/diary/느리게-걷기-대회/"},"frontmatter":{"title":"느리게 걷기 대회","category":"diary","draft":false}}}},"staticQueryHashes":["3128451518","521680639"]}